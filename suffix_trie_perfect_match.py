import time
import re
import sys

#helper function to count the number of occurences of a key in a nested dictionary
def count(d, k):
    return (k in d) + sum(count(v, k) for v in d.values() if isinstance(v, dict))

class SuffixTrie(object):
    #construct the suffix trie from text
    def __init__(self, text):
        #add terminator symbol to text
        text += '$' 
        #initialize empty root
        self.root = {}
        ##walk through text (test string) letter by letter and generate different suffixes
        #for each suffix
        for i in range(0,len(text)):
            #reference the root
            currentSuffix = self.root
            # walk through all the characters c in suffix
            for c in text[i:]:
                #check if character is already in the dictionary
                if c not in currentSuffix:
                    #if not, add as a new dictionary with character as its key 
                    currentSuffix[c] = {} 
                #if the character is there, add it to last dictionary without creating an empty one
                currentSuffix = currentSuffix[c]
        
    
    def followPath(self, pattern):
        #follow path of patter in trie, in the same manner as above
        trie = self.root
        for c in pattern:
            if c not in trie: 
                return None
            trie = trie[c]   
        return trie
    
    
    def countSubstring(self, pattern):
        #count the number of occurrences of the end key $
        key = '$'
        #trie generated by following the pattern
        mydict = self.followPath(pattern)
        my_count = (key in mydict) + sum(count(v, key) for v in mydict.values() if isinstance(v, dict))
        return my_count
    
    def display(self):
        return self.root

trainfile = sys.argv[1]
testfile = sys.argv[2]

with open(trainfile) as f1:
    bug = f1.read()
    #remove whitespace and newline
    bug = re.sub(r'\s+', '', bug)
    bug_length = len(bug)


with open(testfile) as f2:
    test = f2.read()
    #remove whitespace and newline
    test = re.sub(r'\s+', '', test)

f1.close()
f2.close()

start_time = time.time()
my_trie = SuffixTrie(test)
bug_count = my_trie.countSubstring(bug)
print("number of bugs: " + str(bug_count))
print("time elapsed: %f seconds" % (time.time() - start_time))